#ifndef PROJECT_PERIPH_I2C_H
#define PROJECT_PERIPH_I2C_H

#include "../../Core/Inc/i2c.h"
#include "os.h"

namespace Project::Periph {

    /// I2C peripheral class. requirements: event interrupt, tx DMA
    struct I2C {
        /// I2C transmit message class
        struct Msg {
            uint16_t deviceAddr, memAddr;
            uint32_t len;       ///< buffer length
            uint8_t *buf;       ///< pointer to buffer
            uint8_t bufTemp[4]; ///< pointer to temporary buffer (max. 4 bytes)
        };
        using Queue = OS::QueueStatic<Msg, 128>; ///< I2C transmit queue type definition


        I2C_HandleTypeDef &hi2c; ///< I2C handler generated by cubeMX
        Queue txQueue;
        constexpr explicit I2C(I2C_HandleTypeDef &hi2c) : hi2c(hi2c), txQueue() {}

        void init(); ///< init tx queue
        void deinit(); ///< deinit tx queue
        /// I2C transmit blocking
        /// @param deviceAddr device destination address
        /// @param memAddr memory address
        /// @param buf data buffer, either memory-fixed buffer or temporary buffer (max. 4 bytes)
        /// @param len buffer length
        /// @retval HAL_StatusTypeDef. see stm32fXxx_hal_def.h
        int writeBlocking(uint16_t deviceAddr, uint16_t memAddr, uint8_t *buf, uint16_t len);
        /// I2C transmit non blocking
        /// @param deviceAddr device destination address
        /// @param memAddr memory address
        /// @param buf data buffer, either memory-fixed buffer or temporary buffer (max. 4 bytes)
        /// @param len buffer length
        /// @retval HAL_StatusTypeDef (see stm32fXxx_hal_def.h) or osStatus_t (cmsis_os2.h)
        int write(uint16_t deviceAddr, uint16_t memAddr, uint8_t *buf, uint16_t len);
    };

    inline I2C i2c2 { hi2c2 };
} // namespace Project


#endif // PROJECT_PERIPH_I2C_H