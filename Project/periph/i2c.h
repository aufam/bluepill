#ifndef PERIPH_I2C_H
#define PERIPH_I2C_H

#include "../../Core/Inc/i2c.h"

namespace Project::Periph {

    /// I2C peripheral class
    /// @note requirements: event interrupt, tx DMA
    struct I2C {
        /// callback function class
        struct Callback {
            typedef void (*Function)(void *);
            Function fn;
            void *arg;
        };

        I2C_HandleTypeDef &hi2c; ///< I2C handler generated by cubeMX
        Callback txCallback = {};
        constexpr explicit I2C(I2C_HandleTypeDef &hi2c) : hi2c(hi2c) {}

        /// set tx callback
        void init(Callback::Function fn = nullptr, void *arg = nullptr) {
            txCallback.fn = fn;
            txCallback.arg = arg;
        }

        /// reset tx callback
        void deinit() {
            txCallback.fn = nullptr;
            txCallback.arg = nullptr;
        }

        /// I2C write blocking
        /// @retval HAL_StatusTypeDef. see stm32fXxx_hal_def.h
        int writeBlocking(uint16_t deviceAddr,              ///< device destination address
                          uint16_t memAddr,                 ///< memory address
                          uint8_t *buf,                     ///< pointer to data buffer
                          uint16_t len,                     ///< buffer length
                          uint32_t timeout = HAL_MAX_DELAY  ///< in ms
        ) {
            while (hi2c.State != HAL_I2C_STATE_READY);
            return HAL_I2C_Mem_Write(&hi2c,
                                     deviceAddr,
                                     memAddr,
                                     1, buf, len,
                                     timeout);
        }

        /// I2C write non blocking
        /// @param deviceAddr device destination address
        /// @param memAddr memory address
        /// @param buf data buffer, either memory-fixed buffer or temporary buffer (max. 4 bytes)
        /// @param len buffer length
        /// @retval HAL_StatusTypeDef (see stm32fXxx_hal_def.h) or osStatus_t (cmsis_os2.h)
        int write(uint16_t deviceAddr, uint16_t memAddr, uint8_t *buf, uint16_t len) {
            return HAL_I2C_Mem_Write_DMA(&hi2c,
                                         deviceAddr,
                                         memAddr,
                                         1, buf, len);
        }

        /// I2C read blocking
        /// @retval HAL_StatusTypeDef. see stm32fXxx_hal_def.h
        int readBlocking(uint16_t deviceAddr,               ///< destination address
                         uint16_t memAddr,                  ///< memory address
                         uint8_t *buf,                      ///< data buffer
                         uint16_t len,                      ///< buffer length
                         uint32_t timeout = HAL_MAX_DELAY   ///< in ms
        ) {
            while (hi2c.State != HAL_I2C_STATE_READY);
            return HAL_I2C_Mem_Read(&hi2c,
                                     deviceAddr,
                                     memAddr,
                                     1, buf, len,
                                     timeout);
        }
    };

    inline I2C i2c2 { hi2c2 };

} // namespace Project


#endif // PERIPH_I2C_H