#ifndef PROJECT_PERIPH_UART_H
#define PROJECT_PERIPH_UART_H

#include "../../Core/Inc/usart.h"
#include "buffer.h"

namespace Project::Periph {

    /// UART peripheral class. requirements: global interrupt, rx DMA
    struct UART {
        /// callback function class
        struct Callback {
            typedef void (*Function)(void *, size_t);
            Function fn;
            void *arg;
        };
        using Buffer = Project::Buffer<uint8_t , 64>; ///< UART rx buffer type definition

        UART_HandleTypeDef &huart; ///< UART handler generated by cubeMX
        Buffer rxBuffer;
        Callback txCallback = {};
        Callback rxCallback = {};
        constexpr explicit UART(UART_HandleTypeDef &huart) : huart(huart) {}

        /// set callback and start receive to idle DMA
        /// @param rxCBFn receive callback function pointer
        /// @param rxCBArg receive callback function argument
        /// @param txCBFn transmit callback function pointer
        /// @param txCBArg transmit callback function argument
        void init(
                Callback::Function rxCBFn = nullptr, void *rxCBArg = nullptr,
                Callback::Function txCBFn = nullptr, void *txCBArg = nullptr
        );
        /// stop receive DMA
        void deinit();
        /// set rx callback
        /// @param rxCBFn receive callback function pointer
        /// @param rxCBArg receive callback function argument
        void setRxCallback(Callback::Function rxCBFn, void *rxCBArg = nullptr) {
            rxCallback.fn  = rxCBFn;
            rxCallback.arg = rxCBArg;
        }
        /// set tx callback
        /// @param txCBFn transmit callback function pointer
        /// @param txCBArg transmit callback function argument
        void setTxCallback(Callback::Function txCBFn, void *txCBArg = nullptr) {
            txCallback.fn  = txCBFn;
            txCallback.arg = txCBArg;
        }
        /// UART transmit blocking
        /// @param buf data buffer
        /// @param len buffer length
        /// @retval HAL_StatusTypeDef (see stm32fXxx_hal_def.h)
        int writeBlocking(uint8_t *buf, uint16_t len);
        /// UART transmit non blocking
        /// @param buf data buffer
        /// @param len buffer length
        /// @retval HAL_StatusTypeDef (see stm32fXxx_hal_def.h)
        int write(uint8_t *buf, uint16_t len);

        void setBaudRate(uint32_t baud);
        uint32_t getBaudRate() const;

        UART &operator <<(const char *str) { writeBlocking((uint8_t *)str, strlen(str)); return *this; }
    };

    /// UART 1, baud rate 9600
    inline UART uart1 { huart1 };
    /// UART 2, baud rate 115200
    inline UART uart2 { huart2 };

} // namespace Project


#endif // PROJECT_PERIPH_UART_H