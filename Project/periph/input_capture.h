#ifndef WTP_MCU1_INPUT_CAPTURE_H
#define WTP_MCU1_INPUT_CAPTURE_H

#include "tim.h"

namespace Project::Periph {

    /// input capture
    /// @note requirements: TIMx input capture mode, TIMx global interrupt
    struct InputCapture {
        /// callback function class
        struct Callback {
            typedef void (*Function)(void *);
            Function fn;
            void *arg;
        };

        TIM_HandleTypeDef& htim; ///< tim handler generated by cubeMX
        uint32_t channel;
        Callback callback = {};
        constexpr InputCapture(TIM_HandleTypeDef& htim, uint32_t channel) : htim(htim), channel(channel) {}

        /// set callback and start TIM IC interrupt
        void init(Callback::Function fn, void* arg) {
            setCallback(fn, arg);
            HAL_TIM_IC_Start_IT(&htim, channel);
        }

        /// stop TIM IC interrupt
        void deinit() {
            HAL_TIM_IC_Stop_IT(&htim, channel);
        }

        /// enable interrupt
        void enable() {
            switch (channel) {
                case TIM_CHANNEL_1:
                    __HAL_TIM_ENABLE_IT(&htim, TIM_IT_CC1);
                    break;
                case TIM_CHANNEL_2:
                    __HAL_TIM_ENABLE_IT(&htim, TIM_IT_CC2);
                    break;
                case TIM_CHANNEL_3:
                    __HAL_TIM_ENABLE_IT(&htim, TIM_IT_CC3);
                    break;
                case TIM_CHANNEL_4:
                    __HAL_TIM_ENABLE_IT(&htim, TIM_IT_CC4);
                    break;
                default:
                    break;
            }
        }

        /// disable interrupt
        void disable() {
            switch (channel) {
                case TIM_CHANNEL_1:
                    __HAL_TIM_DISABLE_IT(&htim, TIM_IT_CC1);
                    break;
                case TIM_CHANNEL_2:
                    __HAL_TIM_DISABLE_IT(&htim, TIM_IT_CC2);
                    break;
                case TIM_CHANNEL_3:
                    __HAL_TIM_DISABLE_IT(&htim, TIM_IT_CC3);
                    break;
                case TIM_CHANNEL_4:
                    __HAL_TIM_DISABLE_IT(&htim, TIM_IT_CC4);
                    break;
                default:
                    break;
            }
        }

        void setCallback(Callback::Function fn, void* arg) {
            callback.fn = fn;
            callback.arg = arg;
        }
    };

}

#endif //WTP_MCU1_INPUT_CAPTURE_H
