#ifndef PERIPH_PWM_H
#define PERIPH_PWM_H

#include "tim.h"

namespace Project::Periph {

    /// PWM generation.
    /// @note requires: TIMx PWM generation mode, TIMx global interrupt
    struct PWM{
        /// callback function class
        struct Callback {
            typedef void (*Function)(void *);
            Function fn;
            void *arg;
        };

        TIM_HandleTypeDef &htim; ///< tim handler generated by cubeMX
        uint32_t channel; ///< TIM_CHANNEL_x
        Callback halfCB = {};
        Callback fullCB = {};
        constexpr PWM(TIM_HandleTypeDef &htim, uint32_t channel) : htim(htim), channel(channel) {}

        /// initiation. set prescaler, period, and pulse
        /// @param prescaler set TIMx->PSC
        /// @param period set TIMx->ARR
        /// @param pulse set TIMx->CCRchannel
        /// @param halfCBFn half complete callback function pointer
        /// @param halfCBArg half complete callback function argument
        /// @param fullCBFn complete callback function pointer
        /// @param fullCBArg complete callback function argument
        void init(uint16_t prescaler, uint32_t period, uint32_t pulse,
                  Callback::Function halfCBFn = nullptr, void *halfCBArg = nullptr,
                  Callback::Function fullCBFn = nullptr, void *fullCBArg = nullptr)
        {
            setPrescaler(prescaler);
            setPeriod(period);
            setPulse(pulse);
            setCallback(halfCBFn, halfCBArg, fullCBFn, fullCBArg);
        }

        /// start pwm interrupt
        void start() { HAL_TIM_PWM_Start_IT(&htim, channel); }

        /// stop pwm interrupt
        void stop()  { HAL_TIM_PWM_Stop_IT(&htim, channel); }

        /// set callback
        /// @param halfCBFn half complete callback function pointer
        /// @param halfCBArg half complete callback function argument
        /// @param fullCBFn complete callback function pointer
        /// @param fullCBArg complete callback function argument
        void setCallback(Callback::Function halfCBFn = nullptr, void *halfCBArg = nullptr,
                         Callback::Function fullCBFn = nullptr, void *fullCBArg = nullptr)
        {
            halfCB.fn = halfCBFn; halfCB.arg = halfCBArg;
            fullCB.fn = fullCBFn; fullCB.arg = fullCBArg;
        }

        void setPrescaler(uint16_t prescaler) const { htim.Instance->PSC = prescaler; }
        void setPeriod(uint32_t period) const { htim.Instance->ARR = period; }
        void setPulse(uint32_t pulse) const {
            switch (channel) {
                case TIM_CHANNEL_1: htim.Instance->CCR1 = pulse; break;
                case TIM_CHANNEL_2: htim.Instance->CCR2 = pulse; break;
                case TIM_CHANNEL_3: htim.Instance->CCR3 = pulse; break;
                case TIM_CHANNEL_4: htim.Instance->CCR4 = pulse; break;
                default: break;
            }
        }

        [[nodiscard]] uint16_t getPrescaler() const { return htim.Instance->PSC; }
        [[nodiscard]] uint32_t getPeriod() const { return htim.Instance->ARR; }
        [[nodiscard]] uint32_t getPulse() const {
            switch (channel) {
                case TIM_CHANNEL_1: return htim.Instance->CCR1;
                case TIM_CHANNEL_2: return htim.Instance->CCR2;
                case TIM_CHANNEL_3: return htim.Instance->CCR3;
                case TIM_CHANNEL_4: return htim.Instance->CCR4;
                default: return 0;
            }
        }

    };

    /// PWM generation timer 3 channel 1
    inline PWM pwm3channel1 { htim3, TIM_CHANNEL_1 };

}

#endif //PERIPH_PWM_H
