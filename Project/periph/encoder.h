#ifndef PROJECT_ENCODER_H
#define PROJECT_ENCODER_H

#include "../../Core/Inc/tim.h"

namespace Project::Periph {

    /// rotary encoder
    /// @note requirements: TIMx encoder mode, TIMx global interrupt
    struct Encoder {
        /// callback function class
        struct Callback {
            typedef void (*Function)(void *);
            Function fn;
            void *arg;
        };

        TIM_HandleTypeDef &htim; ///< tim handler generated by cubeMX
        int16_t val = 0; ///< current value
        Callback incrementCB = {};
        Callback decrementCB = {};
        constexpr explicit Encoder(TIM_HandleTypeDef &htim) : htim(htim) {}

        /// set callback, and start encoder interrupt
        void init(Callback::Function incrementCBFn = nullptr, void *incrementCBArg = nullptr,
                  Callback::Function decrementCBFn = nullptr, void *decrementCBArg = nullptr)
        {
            setIncrementCB(incrementCBFn, incrementCBArg);
            setDecrementCB(decrementCBFn, decrementCBArg);
            HAL_TIM_Encoder_Start_IT(&htim, TIM_CHANNEL_ALL);
        }

        /// disable encoder interrupt
        void deinit() {
            HAL_TIM_Encoder_Stop_IT(&htim, TIM_CHANNEL_ALL);
        }

        /// set increment callback
        /// @param incrementCBFn increment callback function pointer
        /// @param incrementCBArg increment callback function argument
        void setIncrementCB(Callback::Function incrementCBFn = nullptr, void *incrementCBArg = nullptr) {
            incrementCB.fn = incrementCBFn;
            incrementCB.arg = incrementCBArg;
        }

        /// set decrement callback
        /// @param decrementCBFn decrement callback function pointer
        /// @param decrementCBArg decrement callback function argument
        void setDecrementCB(Callback::Function decrementCBFn = nullptr, void *decrementCBArg = nullptr) {
            decrementCB.fn = decrementCBFn;
            decrementCB.arg = decrementCBArg;
        }

        void inputCaptureCallback() {
            uint16_t counter = htim.Instance->CNT;
            int cnt = counter / 4;
            if (incrementCB.fn && cnt > val) incrementCB.fn(incrementCB.arg);
            if (decrementCB.fn && cnt < val) decrementCB.fn(decrementCB.arg);
            val = (int16_t) cnt;
        }
    };

    inline Encoder encoder1(htim1);

} // namespace Project


#endif // PROJECT_ENCODER_H