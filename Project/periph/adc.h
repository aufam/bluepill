#ifndef PERIPH_ADC_H
#define PERIPH_ADC_H

#include "../../Core/Inc/adc.h"
#include "etl/array.h"
#include "etl/function.h"

namespace Project::periph {

    /// ADC peripheral class
    /// @note requirements: DMA circular
    struct ADCD {
        using CompleteCallback = etl::Function<void(), void*>; ///< callback function class
        inline static const size_t N_CHANNEL = 4;              ///< number of ADC channel(s), should be configured by CubeMX

        ADC_HandleTypeDef &hadc;                    ///< ADC handler generated by cubeMX
        etl::Array<uint32_t, N_CHANNEL> buf = {};   ///< ADC buffer
        CompleteCallback completeCallback = {};     ///< ADC complete callback function

        /// default constructor
        constexpr explicit ADCD(ADC_HandleTypeDef &hadc) : hadc(hadc) {} 

        ADCD(const ADCD&) = delete; ///< disable copy constructor
        ADCD(ADCD&&) = delete;      ///< disable move constructor

        ADCD& operator=(const ADCD&) = delete;  ///< disable copy assignment
        ADCD& operator=(ADCD&&) = delete;       ///< disable move assignment

        /// start ADC DMA circular
        void init() {
            HAL_ADC_Start_DMA(&hadc, buf.begin(), N_CHANNEL);
            __HAL_DMA_DISABLE_IT(hadc.DMA_Handle, DMA_IT_HT); // disable half complete
        }

        /// stop ADC DMA circular and reset callback
        void deinit() { HAL_ADC_Stop_DMA(&hadc); setCompleteCallback(nullptr); }

        /// set complete callback
        /// @param fn complete callback function
        /// @param ctx complete callback function context
        template <typename Fn, typename Ctx>
        void setCompleteCallback(Fn&& fn, Ctx* ctx) { completeCallback = CompleteCallback(etl::forward<Fn>(fn), ctx); }
        
        /// set complete callback
        /// @param fn complete callback function
        template <typename Fn>
        void setCompleteCallback(Fn&& fn) { completeCallback = etl::forward<Fn>(fn); }

        /// get ADC raw value given the index
        uint32_t operator[](int index) { return buf[index]; }
    };

    inline ADCD adc1 { hadc1 };
    
} // namespace Project


#endif // PERIPH_ADC_H