#ifndef PERIPH_ADC_H
#define PERIPH_ADC_H

#include "../../Core/Inc/adc.h"

namespace Project::Periph {

    /// ADC peripheral class
    /// @note requirements: DMA circular, temperature sensor channel, vref channel
    struct ADC {
        /// callback function class
        struct CompleteCallback {
            typedef void (*Function)(void *);
            Function fn;
            void *arg;
        };

        enum {
            INDEX_TEMP   = 0, ///< index of internal temperature sensor
            INDEX_VREF   = 1, ///< index of voltage reference
            INDEX_RANK_1 = 2,
            N_CHANNEL    = 3,  ///< number of ADC channel(s)
        };

        ADC_HandleTypeDef &hadc; ///< ADC handler generated by cubeMX
        uint32_t buf[N_CHANNEL] = {}; ///< ADC buffer
        CompleteCallback completeCallback = {};
        constexpr explicit ADC(ADC_HandleTypeDef &hadc) : hadc(hadc) {}

        /// start ADC DMA circular, and set complete callback
        /// @param cpltCBFn complete callback function pointer. default = null
        /// @param cpltCBArg complete callback function argument. default = null
        void init(CompleteCallback::Function cpltCBFn = nullptr, void* cpltCBArg = nullptr) {
            HAL_ADCEx_Calibration_Start(&hadc);
            HAL_ADC_Start_DMA(&hadc, buf, N_CHANNEL);
            setCompleteCallback(cpltCBFn, cpltCBArg);
            __HAL_DMA_DISABLE_IT(hadc.DMA_Handle, DMA_IT_HT); // disable half complete
        }

        /// stop ADC DMA circular and reset callback
        void deinit() {
            HAL_ADC_Stop_DMA(&hadc);
            setCompleteCallback(nullptr);
        }

        /// set complete callback
        /// @param cpltCBFn complete callback function pointer
        /// @param cpltCBArg complete callback function argument. default = null
        void setCompleteCallback(CompleteCallback::Function cpltCBFn, void* cpltCBArg = nullptr) {
            completeCallback.fn = cpltCBFn;
            completeCallback.arg = cpltCBArg;
        }

        /// get ADC raw value given the index
        uint32_t operator[](size_t index) {
            if (index >= N_CHANNEL) index = N_CHANNEL - 1;
            return buf[index];
        }

        /// get internal temperature in celsius
        float getTemp() {
            float V25 = 1.43;
            float Avg_Slope = 0.0043;
            float VSENSE = float(buf[INDEX_TEMP]) * 3.3f / 4096.0f;
            return (V25 - VSENSE) / Avg_Slope + 25;
        }

        /// get voltage reference in volt
        float getVref() {
            return float(buf[INDEX_VREF]) * 3.3f / 4096.0f;
        }
    };

    inline ADC adc1 { hadc1 };
    
} // namespace Project


#endif // PERIPH_ADC_H